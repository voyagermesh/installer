# Default values for voyager.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Overrides name template
nameOverride: ""
# Overrides fullname template
fullnameOverride: ""
# Number of operator replicas to create (only 1 is supported)
replicaCount: 1
# License for the product.
# Get a license by following the steps from [here](https://voyagermesh.com/docs/latest/setup/install#get-a-trial-license).
# Example:
# helm install appscode/voyager \
#   --set-file license=/path/to/license/file
# or
# helm install appscode/voyager \
#   --set license=<license file content>
license: ""
# Docker registry fqdn used to pull KubeDB related images
# Set this to use docker registry hosted at ${registryFQDN}/${registry}/${image}
registryFQDN: ""
operator:
  # Docker registry used to pull Voyager operator image
  registry: appscode
  # Voyager operator container image
  repository: voyager
  # Voyager operator container image tag
  tag: v14.0.1
  # Compute Resources required by the operator container
  resources: {}
  # Security options the operator container should run with
  securityContext: {}
haproxy:
  # Docker registry used to pull HAProxy image
  registry: appscode
  # HAProxy container image
  repository: haproxy
  # HAProxy container image tag
  tag: 2.5.0-alpine
cleaner:
  # Docker registry used to pull Webhook cleaner image
  registry: appscode
  # Webhook cleaner container image
  repository: kubectl
  # Webhook cleaner container image tag
  tag: v1.22
  # Skip generating cleaner YAML
  skip: false
# Specify an array of imagePullSecrets.
# Secrets must be manually created in the namespace.
#
# Example:
# helm template charts/Voyager \
#   --set imagePullSecrets[0].name=sec0 \
#   --set imagePullSecrets[1].name=sec1
imagePullSecrets: []
# Container image pull policy
imagePullPolicy: IfNotPresent
# Name of cloud provider
cloudProvider:
# Path to the cloud provider configuration file.
# Empty string for no configuration file.
# For azure use /etc/kubernetes/azure.json
cloudConfig: ''
# If true, installs Voyager operator as critical addon
criticalAddon: false
# Log level for operator
logLevel: 3
persistence:
  # Enable mounting cloud config
  enabled: false
  # Host mount path for cloud config
  hostPath: /etc/kubernetes
# Annotations applied to operator deployment
annotations: {}
# Annotations passed to operator pod(s).
podAnnotations: {}
# Node labels for pod assignment
nodeSelector: # +doc-gen:break
  beta.kubernetes.io/os: linux
# Tolerations for pod assignment
tolerations: []
# Affinity rules for pod assignment
affinity: {}
# Security options the operator pod should run with.
podSecurityContext: # +doc-gen:break
  fsGroup: 65535
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
# Ingress class to watch for. If empty, it handles all ingress.
# Set this flag to 'voyager' to handle only ingresses with annotation kubernetes.io/ingress.class=voyager.
ingressClass:
apiserver:
  # The minimum priority the webhook api group should have at least. Please see
  # https://github.com/kubernetes/kube-aggregator/blob/release-1.9/pkg/apis/apiregistration/v1beta1/types.go#L58-L64
  # for more information on proper values of this field.
  groupPriorityMinimum: 10000
  # The ordering of the webhook api inside of the group. Please see
  # https://github.com/kubernetes/kube-aggregator/blob/release-1.9/pkg/apis/apiregistration/v1beta1/types.go#L66-L70
  # for more information on proper values of this field
  versionPriority: 15
  # CA certificate used by the Kubernetes api server. This field is automatically assigned by the operator.
  ca: not-ca-cert
  # If true, bypasses checks that validating webhook is actually enabled in the Kubernetes cluster.
  bypassValidatingWebhookXray: false
  # If true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.com/Azure/AKS/issues/522 (default true)
  useKubeapiserverFqdnForAks: true
  healthcheck:
    # Healthcheck configures the readiness and liveliness probes for the operator pod.
    enabled: false
  servingCerts:
    # If true, generates on install/upgrade the certs that allow the kube-apiserver (and potentially ServiceMonitor)
    # to authenticate operators pods. Otherwise specify certs in `apiserver.servingCerts.{caCrt, serverCrt, serverKey}`.
    generate: true
    # CA certficate used by serving certificate of webhook server.
    caCrt: ""
    # Serving certficate used by webhook server.
    serverCrt: ""
    # Private key for the serving certificate used by webhook server.
    serverKey: ""
# Customization of templates
templates:
  # Name of configmap with custom templates
  cfgmap:
